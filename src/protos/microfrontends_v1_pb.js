/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.microfrontends_v1.ErrorDescription', null, global);
goog.exportSymbol('proto.microfrontends_v1.Microfrontend', null, global);
goog.exportSymbol('proto.microfrontends_v1.MicrofrontendIdRequest', null, global);
goog.exportSymbol('proto.microfrontends_v1.MicrofrontendObjectReply', null, global);
goog.exportSymbol('proto.microfrontends_v1.MicrofrontendObjectRequest', null, global);
goog.exportSymbol('proto.microfrontends_v1.MicrofrontendPage', null, global);
goog.exportSymbol('proto.microfrontends_v1.MicrofrontendPageReply', null, global);
goog.exportSymbol('proto.microfrontends_v1.MicrofrontendPageRequest', null, global);
goog.exportSymbol('proto.microfrontends_v1.PagingParams', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.ErrorDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.ErrorDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.ErrorDescription.displayName = 'proto.microfrontends_v1.ErrorDescription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.ErrorDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.ErrorDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.ErrorDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.ErrorDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    category: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    correlationId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 5, ""),
    message: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cause: jspb.Message.getFieldWithDefault(msg, 7, ""),
    stackTrace: jspb.Message.getFieldWithDefault(msg, 8, ""),
    detailsMap: (f = msg.getDetailsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.ErrorDescription}
 */
proto.microfrontends_v1.ErrorDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.ErrorDescription;
  return proto.microfrontends_v1.ErrorDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.ErrorDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.ErrorDescription}
 */
proto.microfrontends_v1.ErrorDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCause(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStackTrace(value);
      break;
    case 9:
      var value = msg.getDetailsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.ErrorDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.ErrorDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.ErrorDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.ErrorDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCause();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStackTrace();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDetailsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string category = 2;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setCategory = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string correlation_id = 4;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setCorrelationId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string status = 5;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string message = 6;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string cause = 7;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getCause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setCause = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string stack_trace = 8;
 * @return {string}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getStackTrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.microfrontends_v1.ErrorDescription.prototype.setStackTrace = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * map<string, string> details = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.microfrontends_v1.ErrorDescription.prototype.getDetailsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.microfrontends_v1.ErrorDescription.prototype.clearDetailsMap = function() {
  this.getDetailsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.PagingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.PagingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.PagingParams.displayName = 'proto.microfrontends_v1.PagingParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.PagingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.PagingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.PagingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.PagingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    skip: jspb.Message.getFieldWithDefault(msg, 1, 0),
    take: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.PagingParams}
 */
proto.microfrontends_v1.PagingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.PagingParams;
  return proto.microfrontends_v1.PagingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.PagingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.PagingParams}
 */
proto.microfrontends_v1.PagingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSkip(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTake(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.PagingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.PagingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.PagingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.PagingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkip();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTake();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 skip = 1;
 * @return {number}
 */
proto.microfrontends_v1.PagingParams.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.microfrontends_v1.PagingParams.prototype.setSkip = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 take = 2;
 * @return {number}
 */
proto.microfrontends_v1.PagingParams.prototype.getTake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.microfrontends_v1.PagingParams.prototype.setTake = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool total = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.microfrontends_v1.PagingParams.prototype.getTotal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.microfrontends_v1.PagingParams.prototype.setTotal = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.Microfrontend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.Microfrontend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.Microfrontend.displayName = 'proto.microfrontends_v1.Microfrontend';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.Microfrontend.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.Microfrontend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.Microfrontend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.Microfrontend.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pathPrefix: jspb.Message.getFieldWithDefault(msg, 4, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, ""),
    remoteEntry: jspb.Message.getFieldWithDefault(msg, 7, ""),
    exposedModule: jspb.Message.getFieldWithDefault(msg, 8, ""),
    elementName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.Microfrontend}
 */
proto.microfrontends_v1.Microfrontend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.Microfrontend;
  return proto.microfrontends_v1.Microfrontend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.Microfrontend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.Microfrontend}
 */
proto.microfrontends_v1.Microfrontend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathPrefix(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteEntry(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setExposedModule(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setElementName(value);
      break;
    case 10:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.Microfrontend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.Microfrontend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.Microfrontend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.Microfrontend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPathPrefix();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRemoteEntry();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExposedModule();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getElementName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string path_prefix = 4;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getPathPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setPathPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string icon = 5;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setIcon = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string type = 6;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string remote_entry = 7;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getRemoteEntry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setRemoteEntry = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string exposed_module = 8;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getExposedModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setExposedModule = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string element_name = 9;
 * @return {string}
 */
proto.microfrontends_v1.Microfrontend.prototype.getElementName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.microfrontends_v1.Microfrontend.prototype.setElementName = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * map<string, string> params = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.microfrontends_v1.Microfrontend.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.microfrontends_v1.Microfrontend.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.MicrofrontendPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.microfrontends_v1.MicrofrontendPage.repeatedFields_, null);
};
goog.inherits(proto.microfrontends_v1.MicrofrontendPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.MicrofrontendPage.displayName = 'proto.microfrontends_v1.MicrofrontendPage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.microfrontends_v1.MicrofrontendPage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.MicrofrontendPage.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.MicrofrontendPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.MicrofrontendPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.microfrontends_v1.Microfrontend.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.MicrofrontendPage}
 */
proto.microfrontends_v1.MicrofrontendPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.MicrofrontendPage;
  return proto.microfrontends_v1.MicrofrontendPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.MicrofrontendPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.MicrofrontendPage}
 */
proto.microfrontends_v1.MicrofrontendPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 2:
      var value = new proto.microfrontends_v1.Microfrontend;
      reader.readMessage(value,proto.microfrontends_v1.Microfrontend.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.MicrofrontendPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.MicrofrontendPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.MicrofrontendPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.microfrontends_v1.Microfrontend.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 total = 1;
 * @return {number}
 */
proto.microfrontends_v1.MicrofrontendPage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.microfrontends_v1.MicrofrontendPage.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Microfrontend data = 2;
 * @return {!Array<!proto.microfrontends_v1.Microfrontend>}
 */
proto.microfrontends_v1.MicrofrontendPage.prototype.getDataList = function() {
  return /** @type{!Array<!proto.microfrontends_v1.Microfrontend>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.microfrontends_v1.Microfrontend, 2));
};


/** @param {!Array<!proto.microfrontends_v1.Microfrontend>} value */
proto.microfrontends_v1.MicrofrontendPage.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.microfrontends_v1.Microfrontend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.microfrontends_v1.Microfrontend}
 */
proto.microfrontends_v1.MicrofrontendPage.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.microfrontends_v1.Microfrontend, opt_index);
};


proto.microfrontends_v1.MicrofrontendPage.prototype.clearDataList = function() {
  this.setDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.MicrofrontendPageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.MicrofrontendPageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.MicrofrontendPageRequest.displayName = 'proto.microfrontends_v1.MicrofrontendPageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.MicrofrontendPageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.MicrofrontendPageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendPageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filterMap: (f = msg.getFilterMap()) ? f.toObject(includeInstance, undefined) : [],
    paging: (f = msg.getPaging()) && proto.microfrontends_v1.PagingParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.MicrofrontendPageRequest}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.MicrofrontendPageRequest;
  return proto.microfrontends_v1.MicrofrontendPageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.MicrofrontendPageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.MicrofrontendPageRequest}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 2:
      var value = msg.getFilterMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 3:
      var value = new proto.microfrontends_v1.PagingParams;
      reader.readMessage(value,proto.microfrontends_v1.PagingParams.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.MicrofrontendPageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.MicrofrontendPageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendPageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilterMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.microfrontends_v1.PagingParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional string correlation_id = 1;
 * @return {string}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.setCorrelationId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> filter = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.getFilterMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.microfrontends_v1.MicrofrontendPageRequest.prototype.clearFilterMap = function() {
  this.getFilterMap().clear();
};


/**
 * optional PagingParams paging = 3;
 * @return {?proto.microfrontends_v1.PagingParams}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.getPaging = function() {
  return /** @type{?proto.microfrontends_v1.PagingParams} */ (
    jspb.Message.getWrapperField(this, proto.microfrontends_v1.PagingParams, 3));
};


/** @param {?proto.microfrontends_v1.PagingParams|undefined} value */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.setPaging = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.microfrontends_v1.MicrofrontendPageRequest.prototype.clearPaging = function() {
  this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.microfrontends_v1.MicrofrontendPageRequest.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.MicrofrontendPageReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.MicrofrontendPageReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.MicrofrontendPageReply.displayName = 'proto.microfrontends_v1.MicrofrontendPageReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.MicrofrontendPageReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.MicrofrontendPageReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendPageReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.microfrontends_v1.ErrorDescription.toObject(includeInstance, f),
    page: (f = msg.getPage()) && proto.microfrontends_v1.MicrofrontendPage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.MicrofrontendPageReply}
 */
proto.microfrontends_v1.MicrofrontendPageReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.MicrofrontendPageReply;
  return proto.microfrontends_v1.MicrofrontendPageReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.MicrofrontendPageReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.MicrofrontendPageReply}
 */
proto.microfrontends_v1.MicrofrontendPageReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.microfrontends_v1.ErrorDescription;
      reader.readMessage(value,proto.microfrontends_v1.ErrorDescription.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.microfrontends_v1.MicrofrontendPage;
      reader.readMessage(value,proto.microfrontends_v1.MicrofrontendPage.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.MicrofrontendPageReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.MicrofrontendPageReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendPageReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.microfrontends_v1.ErrorDescription.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.microfrontends_v1.MicrofrontendPage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorDescription error = 1;
 * @return {?proto.microfrontends_v1.ErrorDescription}
 */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.getError = function() {
  return /** @type{?proto.microfrontends_v1.ErrorDescription} */ (
    jspb.Message.getWrapperField(this, proto.microfrontends_v1.ErrorDescription, 1));
};


/** @param {?proto.microfrontends_v1.ErrorDescription|undefined} value */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.microfrontends_v1.MicrofrontendPageReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MicrofrontendPage page = 2;
 * @return {?proto.microfrontends_v1.MicrofrontendPage}
 */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.getPage = function() {
  return /** @type{?proto.microfrontends_v1.MicrofrontendPage} */ (
    jspb.Message.getWrapperField(this, proto.microfrontends_v1.MicrofrontendPage, 2));
};


/** @param {?proto.microfrontends_v1.MicrofrontendPage|undefined} value */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.microfrontends_v1.MicrofrontendPageReply.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.microfrontends_v1.MicrofrontendPageReply.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.MicrofrontendIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.MicrofrontendIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.MicrofrontendIdRequest.displayName = 'proto.microfrontends_v1.MicrofrontendIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.MicrofrontendIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.MicrofrontendIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.MicrofrontendIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    microfrontendId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.MicrofrontendIdRequest}
 */
proto.microfrontends_v1.MicrofrontendIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.MicrofrontendIdRequest;
  return proto.microfrontends_v1.MicrofrontendIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.MicrofrontendIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.MicrofrontendIdRequest}
 */
proto.microfrontends_v1.MicrofrontendIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMicrofrontendId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.MicrofrontendIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.MicrofrontendIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.MicrofrontendIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMicrofrontendId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string correlation_id = 1;
 * @return {string}
 */
proto.microfrontends_v1.MicrofrontendIdRequest.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.microfrontends_v1.MicrofrontendIdRequest.prototype.setCorrelationId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string microfrontend_id = 2;
 * @return {string}
 */
proto.microfrontends_v1.MicrofrontendIdRequest.prototype.getMicrofrontendId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.microfrontends_v1.MicrofrontendIdRequest.prototype.setMicrofrontendId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.MicrofrontendObjectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.MicrofrontendObjectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.MicrofrontendObjectRequest.displayName = 'proto.microfrontends_v1.MicrofrontendObjectRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.MicrofrontendObjectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.MicrofrontendObjectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    microfrontend: (f = msg.getMicrofrontend()) && proto.microfrontends_v1.Microfrontend.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.MicrofrontendObjectRequest}
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.MicrofrontendObjectRequest;
  return proto.microfrontends_v1.MicrofrontendObjectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.MicrofrontendObjectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.MicrofrontendObjectRequest}
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 2:
      var value = new proto.microfrontends_v1.Microfrontend;
      reader.readMessage(value,proto.microfrontends_v1.Microfrontend.deserializeBinaryFromReader);
      msg.setMicrofrontend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.MicrofrontendObjectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.MicrofrontendObjectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMicrofrontend();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.microfrontends_v1.Microfrontend.serializeBinaryToWriter
    );
  }
};


/**
 * optional string correlation_id = 1;
 * @return {string}
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.setCorrelationId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Microfrontend microfrontend = 2;
 * @return {?proto.microfrontends_v1.Microfrontend}
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.getMicrofrontend = function() {
  return /** @type{?proto.microfrontends_v1.Microfrontend} */ (
    jspb.Message.getWrapperField(this, proto.microfrontends_v1.Microfrontend, 2));
};


/** @param {?proto.microfrontends_v1.Microfrontend|undefined} value */
proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.setMicrofrontend = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.clearMicrofrontend = function() {
  this.setMicrofrontend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.microfrontends_v1.MicrofrontendObjectRequest.prototype.hasMicrofrontend = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.microfrontends_v1.MicrofrontendObjectReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.microfrontends_v1.MicrofrontendObjectReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.microfrontends_v1.MicrofrontendObjectReply.displayName = 'proto.microfrontends_v1.MicrofrontendObjectReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.toObject = function(opt_includeInstance) {
  return proto.microfrontends_v1.MicrofrontendObjectReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.microfrontends_v1.MicrofrontendObjectReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendObjectReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.microfrontends_v1.ErrorDescription.toObject(includeInstance, f),
    microfrontend: (f = msg.getMicrofrontend()) && proto.microfrontends_v1.Microfrontend.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.microfrontends_v1.MicrofrontendObjectReply}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.microfrontends_v1.MicrofrontendObjectReply;
  return proto.microfrontends_v1.MicrofrontendObjectReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.microfrontends_v1.MicrofrontendObjectReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.microfrontends_v1.MicrofrontendObjectReply}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.microfrontends_v1.ErrorDescription;
      reader.readMessage(value,proto.microfrontends_v1.ErrorDescription.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.microfrontends_v1.Microfrontend;
      reader.readMessage(value,proto.microfrontends_v1.Microfrontend.deserializeBinaryFromReader);
      msg.setMicrofrontend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.microfrontends_v1.MicrofrontendObjectReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.microfrontends_v1.MicrofrontendObjectReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.microfrontends_v1.MicrofrontendObjectReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.microfrontends_v1.ErrorDescription.serializeBinaryToWriter
    );
  }
  f = message.getMicrofrontend();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.microfrontends_v1.Microfrontend.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorDescription error = 1;
 * @return {?proto.microfrontends_v1.ErrorDescription}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.getError = function() {
  return /** @type{?proto.microfrontends_v1.ErrorDescription} */ (
    jspb.Message.getWrapperField(this, proto.microfrontends_v1.ErrorDescription, 1));
};


/** @param {?proto.microfrontends_v1.ErrorDescription|undefined} value */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.microfrontends_v1.MicrofrontendObjectReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Microfrontend microfrontend = 2;
 * @return {?proto.microfrontends_v1.Microfrontend}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.getMicrofrontend = function() {
  return /** @type{?proto.microfrontends_v1.Microfrontend} */ (
    jspb.Message.getWrapperField(this, proto.microfrontends_v1.Microfrontend, 2));
};


/** @param {?proto.microfrontends_v1.Microfrontend|undefined} value */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.setMicrofrontend = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.microfrontends_v1.MicrofrontendObjectReply.prototype.clearMicrofrontend = function() {
  this.setMicrofrontend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.microfrontends_v1.MicrofrontendObjectReply.prototype.hasMicrofrontend = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.microfrontends_v1);
